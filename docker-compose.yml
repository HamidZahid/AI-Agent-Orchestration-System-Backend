version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ai_agent_orch_db
    # Security: Use secrets or environment files, never hardcode credentials
    env_file:
      - .env.db  # Create this file separately (not in git)
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ai_agent_orch}
      # POSTGRES_USER and POSTGRES_PASSWORD should be in .env.db
    # Security: Don't expose database port to host in production
    # Only expose if you need direct database access (remove in production)
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - ai_agent_network
    # Security: Run as non-root user
    user: "999:999"  # Postgres user in alpine image
    restart: unless-stopped
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    # Security: Read-only root filesystem except data directory
    read_only: false  # Set to true if using tmpfs for /tmp, /var/run
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run

  # FastAPI Application
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")}
        VERSION: ${VERSION:-1.0.0}
    container_name: ai_agent_orch_app
    # Security: Load environment from .env file (keep secrets separate)
    env_file:
      - .env
    environment:
      # Security: Use connection string from env, don't hardcode
      DATABASE_URL: ${DATABASE_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      # Security: Never default to wildcard in production
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:3000"]}
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    # Security: Remove volume mounts in production (these are for development)
    # volumes:
    #   - ./src:/app/src
    #   - ./alembic:/app/alembic
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ai_agent_network
    restart: unless-stopped
    # Security: Resource limits
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true
    # Security: Drop all capabilities and add only what's needed
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE  # Only needed to bind to port < 1024 if required

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}

networks:
  ai_agent_network:
    driver: bridge
    # Security: Enable bridge network isolation
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
